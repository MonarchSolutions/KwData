<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7094618c-125d-4c2e-84bd-2fac17b3326b}</ProjectGuid>
    <SHFBSchemaVersion>1.9.3.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>.\Doc\</OutputPath>
    <HtmlHelpName>KwData</HtmlHelpName>
    <Language>en-US</Language>
    <PresentationStyle>vs2005</PresentationStyle>
    <Preliminary>True</Preliminary>
    <FeedbackEMailAddress>Kasewick%40gmail.com</FeedbackEMailAddress>
    <DocumentationSources>
      <DocumentationSource sourceFile="KwData\KwData.csproj" xmlns="" />
    </DocumentationSources>
    <ProjectSummary>Free to use and share.</ProjectSummary>
    <HelpTitle>KwData Class Library</HelpTitle>
    <SyntaxFilters>CSharp</SyntaxFilters>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="Kw.Data" isDocumented="True">&lt;h4&gt;Overview&lt;/h4&gt;
&lt;para&gt;
The &lt;b&gt;BtreeDictionary&lt;/b&gt; class is an optimized and functional superset of the &lt;b&gt;System.Collections.Generic.SortedDictionary&amp;lt;TKey,TValue&lt;/b&gt; class and therefore may be substituted wherever a &lt;b&gt;SortedDictionary&lt;/b&gt; is used. However, &lt;b&gt;BtreeDictionary&lt;/b&gt; significantly outperforms &lt;b&gt;SortedDictionary&lt;/b&gt; in many usage scenerios.
&lt;/para&gt;
&lt;para&gt;
Two iterators are provided to support optimized range queries: &lt;b&gt;SkipUntilKey(TKey)&lt;/b&gt; and &lt;b&gt;BetweenKeys(TKey,TKey)&lt;/b&gt;. Also included is an optimized &lt;b&gt;Last()&lt;/b&gt; method.
&lt;/para&gt;
&lt;h4&gt;Implementation details&lt;/h4&gt;
&lt;para&gt;
The BCL &lt;b&gt;SortedDictionary&lt;/b&gt; class is well tuned, compact, and very fast for relatively small amounts of data. However for large amounts of data such as millions of items, its tree height becomes quite large and it makes a very large number of allocations. This has an obvious impact on performance.
&lt;/para&gt;
&lt;para&gt;
&lt;b&gt;BtreeDictionary&lt;/b&gt; outperforms &lt;b&gt;SortedDictionary&lt;/b&gt;  in many areas by implementing a B+ tree which clusters data - leading to fewer traversal operations and more hits on cache memory. Garbage collection activities should be reduced due to fewer allocations and the reuse of space. Sequential operations are particularly improved. Iteration over the entire collection will see times less than half that of &lt;b&gt;SortedDictionary&lt;/b&gt;.
&lt;/para&gt;
&lt;h4&gt;Complexity analysis&lt;/h4&gt;
&lt;para&gt;
&lt;b&gt;BtreeDictionary&lt;/b&gt; implements a B+ tree structure with only child and right sibling pointers. All nodes maintain 50% fill except the rightmost node of any level.
&lt;/para&gt;
&lt;para&gt;
Range queries and the &lt;b&gt;Last()&lt;/b&gt; method improve on the time complexity of the extension methods of &lt;b&gt;SortedDictionary&lt;/b&gt; from O(&lt;em&gt;n&lt;/em&gt;) to O(log &lt;em&gt;n&lt;/em&gt;) where &lt;em&gt;n&lt;/em&gt; is the number of key/value pairs in the collection.
&lt;/para&gt;
&lt;para&gt;
Like &lt;b&gt;SortedDictionary&lt;/b&gt;, &lt;b&gt;BtreeDictionary&lt;/b&gt; space is guaranteed to stay within O(&lt;em&gt;n&lt;/em&gt;) for any number of insertions and deletions. Worst case time is O(log &lt;em&gt;n&lt;/em&gt;) for a search, insert, or delete operation for any number of insertions and deletions.
&lt;/para&gt;
&lt;para&gt;
&lt;b&gt;BtreeDictionary&lt;/b&gt; implements a non-lazy delete algorithm. Typical B+ tree implementations use lazy deleting where nodes are not required to maintain 50% fill once any deletion has taken place. Lazy deletion is easy to program. While lazy deletes may be desired for disk-based B+ trees to reduce contention, it is not desireable for in-memory implementations as it degrades time and space complexities.
&lt;/para&gt;</NamespaceSummaryItem>
      <NamespaceSummaryItem name="(global)" isDocumented="True" />
    </NamespaceSummaries>
    <ApiFilter />
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>